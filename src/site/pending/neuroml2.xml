<page title="NeuroML 2 examples using the LEMS framework">

<h1>Examples illustrating NeuroML 2 concepts</h1>
 
<p>
    LEMS can be used as a basis for specifying models of many types of dynamical systems. 
    NeuroML version 1 contained some type definitions such as &lt;channel_type&gt;, &lt;channel_type&gt;
    etc. which were defined implicitly. LEMS <x>ComponentType</x>s can be used to define the behaviour of a core set of
    entities which can form the basis for the NeuroML 2 specification, at the very least for channel and
    synapse types, and most likely network elements too. </p>

    <p>More details on the relationship between LEMS and NeuroML 2 are <a href="../neuroml2.php">here</a>.</p>


<h4><a href="#Ex0">Ex0: Simple Integrate and Fire cell</a></h4>
<h4><a href="#Ex1">Ex1: Simple Hodgkin Huxley example</a></h4>
<h4><a href="#Izhikevich">Ex2: Bursting and tonic Izhikevich cells</a></h4>
<h4><a href="#Ex3">Ex3: Network connection between HH cells</a></h4>
<h4><a href="#Ex4">Ex4: Kinetic scheme description for K+ channel</a></h4>
<h4><a href="#Ex5">Ex5: Using "pure" NeuroML v2 files with LEMS</a></h4>
<h4><a href="#Ex6">Ex6: NMDA-R mediated synapse</a></h4>
<h4><a href="#Ex7">Ex7: Short Term Plasticity</a></h4>
<h4><a href="#Ex8">Ex8: Adaptive exponential integrate-and-fire model</a></h4>
<h4><a href="#Ex9">Ex9: FitzHugh-Nagumo model</a></h4>

<h2><a name="Ex0">Ex0: Simple Integrate and Fire cell</a></h2>


<p>This example imports a number of files which define the LEMS <x>ComponentType</x>s allowed in a NeuroML version 2
file. The core dimension/unit definitions (<a href="NeuroMLCoreDimensions.xml">NeuroMLCoreDimensions.xml</a>),
a file defining channel <x>ComponentType</x>s (<a href="Channels.xml">Channels.xml</a>), one for synpase <x>ComponentType</x>s
(<a href="Synapses.xml">Synapses.xml</a>), a number of simple cell definitions (<a href="Cells.xml">Cells.xml</a>),
definition of network related <x>ComponentType</x>s (<a href="Networks.xml">Networks.xml</a>) and some stimuli definitions
(<a href="Inputs.xml">Inputs.xml</a>). Also imported is a
set of simulation <x>ComponentType</x> definitions (<a href="Simulation.xml">Simulation.xml</a>) which won't be part of NeuroML version 2
(SED-ML will be used for this), but are convenient for executing the examples. </p>
<xcode><Include file="NeuroML2CoreTypes/Cells.xml"/>
&lt;!-- The above file includes NeuroMLCoreDimensions.xml, Channels.xml, Synapses.xml and Inputs.xml--&gt;
<Include file="NeuroML2CoreTypes/Networks.xml"/>
<Include file="NeuroML2CoreTypes/Simulation.xml"/>
</xcode>

<p>A <x>ComponentType</x> iafTau is defined in <a href="Cells.xml">Cells.xml</a>, which is a simple I&amp;F cell which tends to a leakReversal potential with characteristic time tau.

Note that iafTau extends a basic I&amp;F cell type which has parameter thresh and reset.</p>
<xcode><ComponentType name="iafBase" extends="abstractCellVolt">
    <Parameter name="thresh" dimension="voltage"/>
    <Parameter name="reset" dimension="voltage"/>
</ComponentType>

<ComponentType name="iafTau" extends="iafBase">
    <Parameter name="leakReversal" dimension="voltage"/>
    <Parameter name="tau" dimension="time"/>

    <EventPort name="a" direction="out"/>
    <Exposure name="V" dimension="voltage"/>

    <Behavior>
        <StateVariable name="V" exposure="V" dimension="voltage"/>
        <TimeDerivative variable="V" value="(leakReversal - V) / tau"/>

        <OnStart>
             <StateAssignment variable="V" value="reset"/>
        </OnStart>

        <OnCondition test="V .gt. thresh">
            <StateAssignment variable="V" value="reset"/>
            <EventOut port="a"/>
        </OnCondition>

    </Behavior>

</ComponentType></xcode>

<p>A <x>Component</x> of this cell type can be created, and a population of those components with the following (note leakReversal &gt; thresh
so the cell is spontaneously active, so no external input is needed):</p>

<xcode><iafTau id="iaf" leakReversal="-50mV" thresh="-55mV" reset="-70mV" tau="30ms"/>

<network id="net1">
    <population id="iafPop" component="iaf" size="1"/>
</network></xcode>

<p>The output of this example is shown below.</p>

<img src="IaF.png"/>

<p>The full code for this example can be found <a href="NeuroML2_Ex0_IaF.xml">here</a>.</p>

<h2><a name="Ex1">Ex1: Simple Hodgkin Huxley example</a></h2>


<p>
In <a href="Channels.xml">Channels.xml</a> there are definitions of a number of <x>ComponentType</x>s which can be used for specifying HH like ion channels.
Once this file is included, the <x>ComponentType</x>s can be used to define <x>Component</x>s which have a form similar to those proposed for NeuroML version 2:
<xcode>
<ionChannel id="na" type="ionChannelHH" conductance="10pS">

   <gateHH id="m" instances="3">
        <forwardRate type="HHExpLinearRate" rate="1per_ms" midpoint="-40mV" scale="10mV"/>
        <reverseRate type="HHExpRate" rate="4per_ms" midpoint="-65mV" scale="-18mV"/>
   </gateHH>

   <gateHH id="h" instances="1">
       <forwardRate type="HHExpRate" rate="0.07per_ms" midpoint="-65mV" scale="-20mV"/>
       <reverseRate type="HHSigmoidRate" rate="1per_ms" midpoint="-35mV" scale="10mV"/>
   </gateHH>

</ionChannel>
</xcode>
</p>

<p>Cells can also be created based on the types in <a href="Cells.xml">Cells.xml</a>, and stimuli based on those in <a href="Inputs.xml">Inputs.xml</a>:
<xcode>

<abstractCell id="hhcell" type="pointCellCondBased" capacitance="10pF"  v0="-65mV" thresh="20mV">

    <channelPopulation id="leak" ionChannel="passive" number="300" erev="-54.3mV"/>
    <channelPopulation id="naChans" ionChannel="na" number="120000" erev="50mV"/>
    <channelPopulation id="kChans" ionChannel="k" number="36000" erev="-77mV"/>

</abstractCell>

<pulseGenerator id="pulseGen1" delay="100ms" duration="100ms" amplitude="0.08 nA" />

</xcode></p>


<p>A simple network of one cell is created:
<xcode>
<network id="net1">
    <population id="hhpop" component="hhcell" size="1"/>
    <explicitInput target="hhpop[0]" input="pulseGen1"/>
</network>
</xcode></p>

<p>A simulation can be run and a number of the variables of the model plotted, including membrane potential and the m, h, n gating variables
of the Na<sup>+</sup> and K<sup>+</sup> channels. The data cann also be saved using the save attribute.
<xcode>
<Simulation id="sim1" length="300ms" step="0.01ms" target="net1">

    <Display id="d1" title="Ex1: Simple HH example: Voltage" timeScale="1ms">
        <Line id="l1" quantity="hhpop[0]/v" scale="1mV"  color="#ffffff" save="hh_v.dat"/>
    </Display>

    <Display id="d2" title="Ex1: Simple HH example: rate variables" timeScale="1ms">

        <!-- Lines in extra Displays will only be plotted if saved! -->

        <Line id="l2" quantity="hhpop[0]/naChans/na/m/q" scale="1"  color="#000000" save="hh_m.dat"/>
        <Line id="l3" quantity="hhpop[0]/naChans/na/h/q" scale="1"  color="#ff0000" save="hh_h.dat"/>
        <Line id="l4" quantity="hhpop[0]/kChans/k/n/q" scale="1"  color="#0000ff" save="hh_n.dat"/>
    </Display>

</Simulation></xcode></p>

<p>The output of this example is shown below. The membrane potential trace is shown on top and the values of m, h, n are plotted below.</p>
<img src="HH.png"/>

<p>The full code for this example can be found <a href="NeuroML2_Ex1_HH.xml">here</a>.</p>


<h2><a name="Izhikevich">Ex2: Bursting and tonic Izhikevich cells</a></h2>

<p>An example of the <a href="http://www.izhikevich.org/publications/whichmod.htm">Izhikevich simple spiking neuron model</a> specified as
a <x>ComponentType</x> in LEMS. The <x>ComponentType</x> for the
cell follows (taken from <a href="Cells.xml">Cells.xml</a>):<xcode>

<ComponentType name="izhikevichCell" extends="abstractCellMembPot">
<Parameter name="v0" dimension="voltage"/>
<Parameter name="a" dimension="none"/>
<Parameter name="b" dimension="none"/>
<Parameter name="c" dimension="none"/>
<Parameter name="d" dimension="none"/>
<Parameter name="thresh" dimension="voltage"/>
<Parameter name="Iamp" dimension="none"/>
<Parameter name="Idel" dimension="time"/>
<Parameter name="Idur" dimension="time"/>

<!--
 The following are needed to ensure a, b, c, d, U & I remain dimensionless...
-->
<Constant name="tscale" dimension="per_time" value="1per_ms"/>
<Constant name="vscale" dimension="voltage" value="1mV"/>
<Constant name="pervscale" dimension="per_voltage" value="1per_mV"/>
<EventPort name="a" direction="out"/>
<Exposure name="U" dimension="none"/>
<Exposure name="I" dimension="none"/>

<Behavior>
<StateVariable name="v" dimension="voltage" exposure="v"/>
<StateVariable name="U" dimension="none" exposure="U"/>
<StateVariable name="I" dimension="none" exposure="I"/>

<OnStart>
<StateAssignment variable="v" value="v0"/>
<StateAssignment variable="U" value="v0 * b * pervscale"/>
<StateAssignment variable="I" value="0"/>
</OnStart>

<OnCondition test="v .gt. thresh">
<StateAssignment variable="v" value="c*vscale"/>
<StateAssignment variable="U" value="U+d"/>
<EventOut port="a"/>
</OnCondition>

<OnCondition test="t .gt. Idel .and. t .lt. Idel+Idur">
<StateAssignment variable="I" value="Iamp"/>
</OnCondition>

<OnCondition test="t .gt. Idel+Idur">
<StateAssignment variable="I" value="0"/>
</OnCondition>
<TimeDerivative variable="v" value="vscale*tscale * (0.04*v*v*pervscale*pervscale + 5*v*pervscale + 140.0 - U + I)"/>
<TimeDerivative variable="U" value="tscale * a * (b*v*pervscale - U)"/>
</Behavior>
</ComponentType></xcode></p>

<p>This allows a very concise specification of a cell model when used in a network (here 3 cells with different spiking behaviour are created):<xcode>

<izhikevichCell id="izBurst" v0 = "-70mV" thresh = "30mV" a ="0.02" b = "0.2" c = "-50.0" d = "2" Iamp="15" Idel="22ms" Idur="2000ms"/>

<izhikevichCell id="izTonic" v0 = "-70mV" thresh = "30mV" a ="0.02" b = "0.2" c = "-65.0" d = "6" Iamp="14" Idel="20ms" Idur="2000ms"/>

<izhikevichCell id="izMixed" v0 = "-70mV" thresh = "30mV" a ="0.02" b = "0.2" c = "-55.0" d = "4" Iamp="10" Idel="20ms" Idur="2000ms"/>

<network id="net1">
    <population id="izpopBurst" component="izBurst" size="1"/>
    <population id="izpopTonic" component="izTonic" size="1"/>
    <population id="izpopMixed" component="izMixed" size="1"/>
</network>

</xcode></p>

<p>The plots below shows the evolution of the v and U variables in 2 of the cells.</p>

<img src="Izh.png"/>

<p>The full code for this example can be found <a href="NeuroML2_Ex2_Izh.xml">here</a>.</p>


<h2><a name="Ex3">Ex3: Network connection between HH cells</a></h2>

<p>This examples uses user defined <x>ComponentType</x>s for synapses in <a href="Synapses.xml">Synapses.xml</a>, which can be instantiated with:</p>
<xcode>
<expOneSynapse id="sy1" gbase="0.5nS" erev="0mV" tau="3ms" />

<expTwoSynapse id="sy2" gbase="0.5nS" erev="0mV" tauRise="1ms" tauDecay="2ms" /></xcode>

<p>The plots below shows the source cell firing and the post synaptic membrane response.</p>

<img src="Net.png"/>

<p>The full code for this example can be found <a href="NeuroML2_Ex3_Net.xml">here</a>.</p>




<h2><a name="Ex4">Ex4: Kinetic scheme description for K+ channel</a></h2>

<p>This examples contains a K<sup>+</sup> channel specified using a Kinetic scheme description which will probably be the preferred format for channels in NeuroML version 2:</p>
<xcode><ionChannel id="k_vh" conductance="8pS">
    <gate id="n" power="1" deltaV="0.1mV">
        <closedState id="c1"/>
        <openState id="o1"/>
        <vHalfTransition from="c1" to="o1" vHalf = "0mV" z="1.5" gamma="0.75" tau="3.2ms" tauMin="0.3ms"/>
    </gate>
</ionChannel></xcode>


<p>The full code for this example can be found <a href="NeuroML2_Ex4_KS.xml">here</a>.</p>


<h2><a name="Ex5">Ex5: Using "pure" NeuroML v2 files with LEMS</a></h2>

<p>The examples above have used files mixing LEMS specific elements (e.g. &lt;Lems&gt;, &lt;Simulation&gt;, &lt;Display&gt;) with NeuroML 2 elements
(e.g. &lt;ionChannel&gt;, &lt;network&gt;). This example shows how all NeuroML 2 elements can be removed to separate files (valid according to the latest
<a href="http://neuroml.svn.sourceforge.net/viewvc/neuroml/DemoVer2.0/lems/Schemas/NeuroML2/NeuroML_v2alpha.xsd?view=markup">NeuroML 2 draft schema</a>) and
include these in the main LEMS file. This allows testing through LEMS of "pure" NeuroML v2 files, which may have been generated by applications without any reference to the LEMS framework.</p>

<p>In the <a href="NeuroML2_Ex5_DetCell.xml">main LEMS file</a>, the NeuroML file is included as any other LEMS file</p>
<xcode>
        <Include file="NeuroML2CoreTypes/NeuroMLCoreDimensions.xml"/>
        <Include file="NeuroML2CoreTypes/Cells.xml"/>
        <Include file="NeuroML2CoreTypes/Networks.xml"/>
        <Include file="NeuroML2CoreTypes/Simulation.xml"/>


        &lt;!-- Including file with a &lt;neuroml&gt; root, a "real" NeuroML 2 file --&gt;
        <Include file="DetailedHHCell.nml"/>


        <Simulation id="sim1" length="300ms" step="0.01ms" target="net1">  <!-- Subelements omitted for clarity -->
        </Simulation>
</xcode>

<p>The contents of the NeuroML file follow. Note the &lt;neuroml&gt; elements are stripped by the LEMS interpreter on including the file.</p>

<xinclude src="../../nml2-examples/DetailedHHCell.nml"/>
<p>Note: only single compartment cells are supported at the moment, i.e. only one &lt;segment&gt; element allowed in &lt;morphology&gt;!</p>

<h2><a name="Ex6">Ex6: NMDA-R mediated synapse</a></h2>

<p>This example shows how the basic synapse mechanism can be extended to allow addition of a voltage (and Magnesium concentration) dependent
synaptic block component (e.g. for NMDA (N-Methyl-D-aspartic acid) receptor mediated synapses). The code below shows the NeuroML 2 form for an NMDA synapse:</p>

<xcode>
        <nmdaSynapse id="nmdaSyn" gbase="0.5nS" erev="0mV" tauRise="2ms" tauDecay="8ms">
            <block type="VoltageConcDepBlock" species="mg" blockConcentration="1.2 mM" scalingConc="1.920544 mM" scalingVolt="16.129 mV"/>
        </nmdaSynapse>
        </xcode>

<p>The plots below show a passive cell (left) receiving synaptic input from an NMDAR synapse. The membrane potential is stepped at 200ms with a current clamp.
The right plot shows the conductance waveform of the synapse. At more depolarised membrane potentials the synaptic response is higher.</p>

<img src="NMDA.png"/>

<p>The full code for this example can be found <a href="NeuroML2_Ex6_NMDA.xml">here</a>, and the definition of the nmdaSyn <x>ComponentType</x>
is in the <a href="Synapses.xml">Synapses.xml</a> file.</p>



<h2><a name="Ex7">Ex7: Short Term Plasticity</a></h2>


<p>This example shows an implementation of Short Term Plasticity roughly along the lines of Tsodyks M, Uziel A, Markram H: Synchrony generation in recurrent
networks with frequency-dependent synapses. J Neurosci 2000. NeuroML 2 elements for a fixed, depressing and facilitating synapse are shown below:</p>

<xcode>

        <expTwoSynapse id="noStpSyn" gbase="1nS" erev="0mV" tauRise="0.1ms" tauDecay="2ms"/>

        <stpSynapse id="stpSynDep" gbase="1nS" erev="0mV" tauRise="0.1ms" tauDecay="2ms">
                <plasticity initReleaseProb = "0.5" tauFac = "0 ms" tauRec = "120 ms"/>
        </stpSynapse>

        <stpSynapse id="stpSynFac" gbase="1nS" erev="0mV" tauRise="0.1ms" tauDecay="2ms">
                <plasticity initReleaseProb = "0.5" tauFac = "300 ms" tauRec = "0 ms"/>
        </stpSynapse>
</xcode>

<p>The figure below shows the behavour of the conductances of each of these 3 synapses (top plot), and the internal scaling
variables (R and U) of the facilitating and depressing synapses (bottom).</p>

<img src="STP.png"/>

<p>The full code for this example can be found <a href="NeuroML2_Ex7_STP.xml">here</a>, and the definition of the stpSynapse <x>ComponentType</x>
is in the <a href="Synapses.xml">Synapses.xml</a> file.</p>


<h2><a name="Ex8">Ex8: Adaptive exponential integrate-and-fire model</a></h2>

<p>This is a 2 variable spiking neuron model developed by Brette and Gernstner in 2005. For more details see
<a href="http://www.scholarpedia.org/article/Adaptive_exponential_integrate-and-fire_model">here</a>. NeuroML 2 elements for 
creating 4 cells with different types of spiking behaviour is shown below:</p>

<xcode>
<adExIaFCell id="adExBurst2"     C="281pF" gL="30nS" EL="-70.6mV" reset="-48.5mV" VT = "-50.4mV" thresh = "-40.4mV" delT="2mV" tauw="40ms"  a ="4nS"   b = "0.08nA" Iamp="0.8nA"  Idel="0ms"   Idur="2000ms"/>
<adExIaFCell id="adExBurst4"     C="281pF" gL="30nS" EL="-70.6mV" reset="-47.2mV" VT = "-50.4mV" thresh = "-40.4mV" delT="2mV" tauw="40ms"  a ="4nS"   b = "0.08nA" Iamp="0.8nA"  Idel="0ms"   Idur="2000ms"/>
<adExIaFCell id="adExBurstChaos" C="281pF" gL="30nS" EL="-70.6mV" reset="-48mV"   VT = "-50.4mV" thresh = "-40.4mV" delT="2mV" tauw="40ms"  a ="4nS"   b = "0.08nA" Iamp="0.8nA"  Idel="0ms"   Idur="2000ms"/>
<adExIaFCell id="adExRebound"    C="281pF" gL="30nS" EL="-60mV"   reset="-51mV"   VT = "-54mV"   thresh = "-30mV"   delT="2mV" tauw="150ms" a ="200nS" b = "0.1nA"  Iamp="-0.5nA" Idel="150ms" Idur="50ms"/>


<network id="net1">
    <population id="adExPop1" component="adExBurst2" size="1"/>
    <population id="adExPop2" component="adExBurst4" size="1"/>
    <population id="adExPop3" component="adExBurstChaos" size="1"/>
    <population id="adExPop4" component="adExRebound" size="1"/>
</network>
</xcode>


<p>The full code for this example can be found <a href="NeuroML2_Ex8_AdEx.xml">here</a>, and the definition of the adExIaFCell <x>ComponentType</x>
is in the <a href="Cells.xml">Cells.xml</a> file. The section related to the time derivative of the V and w state variables is shown below:</p>

<xcode>
        <TimeDerivative variable="v" value="(-1*gL*(v-EL) + gL*delT*exp((v - VT)/delT) - w + I)/C"/>
        <TimeDerivative variable="w" value="(a*(v-EL) - w) / tauw"/>
</xcode>

<p>The figure below shows v and w for 3 of the cells described above. The left plots show the traces as run by the LEMS interpreter, and the right plots
show the traces when NEURON code is generated from the LEMS definitions. The NEURON Python and mod files are generated using:</p>
<code>
  ./lems nml2-examples/NeuroML2_Ex8_AdEx.xml -neuron
</code>
<p>After generation the mod files should be compiled in the usual way, and NeuroML2_Ex8_AdEx_nrn.py run using the NEURON Python interpreter.</p>

<img src="adEx.png"/>

<h2><a name="Ex9">Ex8: FitzHugh-Nagumo model</a></h2>

<p>This is version of the simplified HH model by FitzHugh and Nagumo, see
<a href="http://www.scholarpedia.org/article/FitzHugh-Nagumo_model">here</a>. 
The 2 equations that define the behaviour of the state variables V and W of this model are:</p>

<xcode>
        <TimeDerivative variable="V" value="tscale * (V - V^3 - W + I)"/>
        <TimeDerivative variable="W" value="tscale * (0.08 * (V + 0.7 - W))"/>
</xcode>

<p>Note: tscale is a &lt;Constant&gt; with value 1 s<sup>-1</sup>, added to ensure consistency of units if V and W are dimensionless.</p>
<p>The full code for the example below can be found <a href="NeuroML2_Ex9_FN.xml">here</a>, and the definition of the fitzHughNagumoCell <x>ComponentType</x>
is in the <a href="Cells.xml">Cells.xml</a> file. The screenshost below are the model running on (from the top): LEMS; the model mapped to SBML and run
using <a href="http://www.celldesigner.org/">CellDesigner</a>.
</p>

<img src="nml2_9a.png"/>
<img src="nml2_9b.png"/>
</page>








